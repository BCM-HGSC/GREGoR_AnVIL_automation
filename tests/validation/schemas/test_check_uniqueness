import pytest
from pathlib import Path

from gregor_anvil_automation.validation.sample import SampleValidator
from gregor_anvil_automation.validation.schema import get_schema
from gregor_anvil_automation.utils.issue import Issue
from gregor_anvil_automation.utils.types import Sample, Table
from gregor_anvil_automation.utils.mappings import UNIQUE_MAPPING
from gregor_anvil_automation.validation.checks import check_uniqueness


@pytest.fixture(name="uniqueness_table", scope="function")
def fixture_uniqueness_table():
    return {
        {"aligned_dna_short_read_id": "BCM_BHTEST_test-batch_id",
        "experiment_dna_short_read_id": "BCM_BHTEST",
        "aligned_dna_short_read_file": "",
        "aligned_dna_short_read_index_file": "",
        "md5sum": "test-uniqueness-gregor",
        "reference_assembly": "GRCh38",
        "reference_assembly_uri": "NA",
        "reference_assembly_details": "test-uniqueness-gregor",
        "alignment_software": "test-uniqueness-gregor",
        "mean_coverage": "test-uniqueness-gregor",
        "analysis_details": "test-uniqueness-gregor",
        "quality_issues": "test-uniqueness-gregor",},
        {"aligned_dna_short_read_id": "BCM_BHTEST_test-batch_id",
        "experiment_dna_short_read_id": "BCM_BHTEST",
        "aligned_dna_short_read_file": "",
        "aligned_dna_short_read_index_file": "",
        "md5sum": "test-uniqueness-gregor",
        "reference_assembly": "GRCh38",
        "reference_assembly_uri": "NA",
        "reference_assembly_details": "test-uniqueness-gregor",
        "alignment_software": "test-uniqueness-gregor",
        "mean_coverage": "test-uniqueness-gregor",
        "analysis_details": "test-uniqueness-gregor",
        "quality_issues": "test-uniqueness-gregor",},
    }


@pytest.fixture(name="uniqueness_sample", scope="function")
def fixture_uniqueness_sample():
    return {
        "aligned_dna_short_read_id": "BCM_BHTEST_test-batch_id",
        "experiment_dna_short_read_id": "BCM_BHTEST",
        "aligned_dna_short_read_file": "",
        "aligned_dna_short_read_index_file": "",
        "md5sum": "test-uniqueness-gregor",
        "reference_assembly": "GRCh38",
        "reference_assembly_uri": "NA",
        "reference_assembly_details": "test-uniqueness-gregor",
        "alignment_software": "test-uniqueness-gregor",
        "mean_coverage": "test-uniqueness-gregor",
        "analysis_details": "test-uniqueness-gregor",
        "quality_issues": "test-uniqueness-gregor",
    }


@pytest.fixture(name="get_issues")
def fixture_get_issues():
    issues = list[Issue]
    return issues


def test_check_uniqueness(
    uniqueness_sample, uniqueness_table, get_issues
):
    """Test that check_uniqueness sample passes validation"""
    issues = get_issues
    row = uniqueness_table.index("aligned_dna_short_read_id")
    assert check_uniqueness(uniqueness_sample, uniqueness_table, issues) == False
    assert issues == {uniqueness_table, f"Value aligned_dna_short_read_id already exists in the table uniqueness_table in row {row}", "uniqueness_table", row}
